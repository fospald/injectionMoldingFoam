/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.2                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
//    default         backward;
    default         Euler;
//    default         CrankNicolson 1.0;
}

gradSchemes
{
    default         Gauss linear;
//      grad(alpha.phase1)    cellLimited Gauss linear 1.0;
//      grad(tr(A2))    cellLimited Gauss linear 1.0;
//      grad(U)         cellLimited Gauss linear 1.0;
}

//divRhoPhiUScheme Gauss linearUpwindV Gauss linear;

divRhoPhiUScheme Gauss upwind;
divPhiAlphaScheme Gauss vanLeer;
divPhiA2Scheme Gauss limitedLinear 1.0;

divSchemes
{
    default         Gauss linear;

    div(rhoPhi,U)  $divRhoPhiUScheme;
    div(phi,alpha)  $divPhiAlphaScheme;
    div(phirb,alpha) Gauss linear;

    div(phi,A2)     $divPhiA2Scheme;
    div(phi,T)      Gauss limitedLinear 1.0;

    div(Np,U)       Gauss linear;

/*
    div(phi,T)      Gauss upwind;
    div(phi,A2)     Gauss limitedLinear 1.0;
    div((muEff*dev(T(grad(U))))) Gauss linear;
    div(phi,alpha)  Gauss vanLeer;
    div(phirb,alpha) Gauss interfaceCompression 1;

    div(rho*phi,U)  Gauss upwind;
    div(phi,thermo:rho.1) Gauss upwind;
    div(phi,thermo:rho.2) Gauss upwind;
    div(rho*phi,K)  Gauss upwind;
    div(phi,p)      Gauss upwind;
    div(phi,k)      Gauss upwind;

    div(StressFiber)     Gauss linear;
    div((muEff*dev2(T(grad(U))))) Gauss linear;
*/
}

laplacianSchemes
{
    default         Gauss linear corrected;

/*
      laplacian(Np,U) Gauss linear uncorrected;
      laplacian(muEff,U)  Gauss linear uncorrected;
      laplacian(Np,U) Gauss linear uncorrected;
      laplacian(((alpha.phase1*alphaEff)+(alpha2*alphaEff)),T)  Gauss linear uncorrected;
      laplacian(Dp,p_rgh) Gauss linear uncorrected;
*/
}

interpolationSchemes
{
    default           linear;
/*
      interpolate(rho)	linear;
      interpolate(grad(alpha.phase1)) linear;
      interpolate(thermo:rho1)  linear;
      interpolate(thermo:rho2)  linear;
      interpolate(((rAU*rho_0)*U_0)) linear;
      interpolate((rAU*rho_0))  linear;
      interpolate(rAU)  linear;
      interpolate(U_0)  linear;
      interpolate(HbyA) linear;
      interpolate((sigma*K)) linear;
*/
}

snGradSchemes
{
    default         corrected;

/*
      snGrad(rho)     uncorrected;
      snGrad(alpha.phase1)  uncorrected;
*/
}

fluxRequired
{
    default         no;
    p_rgh;
    pcorr;
}


// ************************************************************************* //
